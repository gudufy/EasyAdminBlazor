@typeparam TType

<Select Items="Source" @bind-Value="CurrentValue" DisplayText="@DisplayText"></Select>

@code {
    [Parameter]
    public List<SelectedItem> Source { get; set; }

    /// <summary>
    /// 上级编码
    /// </summary>
    [Parameter]
    public string ParentName { get; set; }

    /// <summary>
    /// 显示名称
    /// </summary>
    [Parameter]
    public string DisplayText { get; set; }

    [Parameter]
    public TType? Value { get; set; }

    [Parameter]
    public EventCallback<TType?> ValueChanged { get; set; }

    [Inject]
    private IFreeSql fsql { get; set; }

    private TType? CurrentValue
    {
        get => Value;
        set
        {
            Value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        if (Source == null)
        {
            var items = await fsql.Select<SysDict>()
                .Where(x => x.Parent.Name == ParentName || x.Name == ParentName)
                .OrderBy(x => x.Sort)
                .ToListAsync();

            if (string.IsNullOrEmpty(DisplayText))
            {
                DisplayText = items.Where(x => x.ParentId == 0).First().Description;
            }

            Source = items.Where(x => x.ParentId != 0).Select(x => new SelectedItem(x.Name, x.Value)).ToList();
        }

        await InvokeAsync(StateHasChanged);
    }
}